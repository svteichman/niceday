% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/est_nuis.R
\name{est_nuis}
\alias{est_nuis}
\title{Estimate nuisance parameters for niceday model}
\usage{
est_nuis(
  W,
  A,
  X,
  num_crossfit_folds = 10,
  num_crossval_folds = 10,
  gtrunc = min(0.05, 5/sqrt(NROW(W))/log(NROW(W))),
  sl.lib.pi = c("SL.mean", "SL.glm.binom", "SL.glmnet.binom", "SL.gam.binom",
    "SL.ranger.binom", "SL.hal9001.binom"),
  sl.lib.m = c("SL.mean", "SL.glm.pois", "SL.glmnet.pois", "SL.ranger.pois"),
  sl.lib.q = sl.lib.pi,
  allow_warnings = TRUE,
  enforce_pos_reg = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{W}{Matrix of multivariate outcome variables.}

\item{A}{Binary covariate of interest.}

\item{X}{Matrix of covariates to adjust for.}

\item{num_crossfit_folds}{Number of folds for cross-fitting. Default is `10`.}

\item{num_crossval_folds}{Number of folds for cross-validation. Default is `10`.}

\item{gtrunc}{Truncation parameter, bounding the estimated propensity scores away from `0` and `1` by `gtrunc`. Default is `min(0.05, 5 / sqrt(NROW(W)) / log(NROW(W)))`.}

\item{sl.lib.pi}{Libraries used to estimate the propensity score nuisance function. Default is `c("SL.mean", "SL.glm.binom", "SL.glmnet.binom", "SL.gam.binom", "SL.ranger.binom", "SL.hal9001.binom")`.}

\item{sl.lib.m}{Libraries used to estimate conditional mean mu_j nuisance functions. Default is `c("SL.mean", "SL.glm.pois", "SL.glmnet.pois", "SL.ranger.pois")`.}

\item{sl.lib.q}{Libraries used to estimate conditional probabilities on nonzero observations. Default is the input to `sl.lib.pi`.}

\item{allow_warnings}{Allow warnings? Default is `TRUE`.}

\item{enforce_pos_reg}{Should estimates of \eqn{E[W_j|A=a,X]} to forced to be strictly positive? Default is `FALSE`.}

\item{verbose}{Do you want to receive updates as this function runs? Default is `TRUE`.}
}
\value{
A list of estimated nuisance functions and additional diagnostic information.
}
\description{
Estimate nuisance parameters for niceday model
}
\examples{
data(EcoZUR_meta)
data(EcoZUR_count)
nuis <- est_nuis(W = EcoZUR_count[, 1:50], # consider only the first 50 taxa to run quickly
                 A = (EcoZUR_meta[, "Diarrhea"] == "Case") * 1,
                 X = model.matrix(~ sex + age_months, EcoZUR_meta),
                 num_crossval_folds = 2,
                 num_crossfit_folds = 2,
                 sl.lib.pi = c("SL.mean"), # choosing single learner for the example to run quickly,
                 sl.lib.m = c("SL.mean"))  # in practice would use other options as well

}
